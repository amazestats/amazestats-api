openapi: 3.0.0

info:
  title: Volleyball Stats API
  description: Public API for Amazestats
  version: 0.3.0
  license:
    name: Eclipse Public License - v 2.0
    url: https://www.eclipse.org/legal/epl-2.0/

tags:
   - name: admin
     description: Operations related to administration
   - name: auth
     description: Operations related to authentication and authorization
   - name: competition
     description: Operations related to competitions
   - name: division
     description: Operations related to divisions
   - name: match
     description: Operations related to matches
   - name: season
     description: Operations related to seasons
   - name: team
     description: Operations related to teams
   - name: user
     description: Operations related to users

servers:
  - url: http://localhost/api
    description: Development Server

paths:
  /users:
    get:
      tags: [user]
      summary: Get all users
      responses:
        200:
          description: Successfully retrieved all users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
    post:
      tags: [auth, user]
      summary: Create new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: Successfully created user.
        400:
          description: Invalid parameters.
        409:
          description: User already exists.


  /users/{id}:
    get:
      tags: [user]
      summary: Get specific user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Numeric ID of the user.
      responses:
        200:
          description: Successfully retrieved user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User does not exist.

  /token:
    post:
      tags: [auth]
      summary: Create new access token
      security:
        - basic: []
      responses:
        200:
          description: Successfully generated new token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        401:
          description: User could not be authenticated.

  /competitions:
    get:
      tags: [competition]
      summary: Get all competitions
      responses:
        200:
          description: Succesfully retrieved competitions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Competitions'

  /competitions/{competition}:
    get:
      tags: [competition]
      summary: Get competition by ID
      parameters:
        - in: path
          name: competition
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the competition to get.
      responses:
        200:
          description: Successfully retrieved competition.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Competition'
        404:
          description: Competition by given ID does not exist.

  /divisions:
    get:
      tags: [division]
      summary: Get all divisions
      parameters:
        - in: query
          name: key
          required: false
          schema:
            type: string
            example: 'premier-league'
          description: Find division by its key.
      responses:
        200:
          description: Successfully retrieved divisions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Divisions'
        400:
          description: Failed to retrieve divisions.
        404:
          description: Competition does not exist.

    post:
      tags: [division]
      summary: Create new division
      security:
        - bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Division'
      responses:
        201:
          description: Successfully created division.
        400:
          description: Failed to create division.

  /divisions/{id}:
    get:
      tags: [division]
      summary: Get division by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Numeric ID of the division.
      responses:
        200:
          description: Successfully retrieved division.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Division'
        404:
          description: Division does not exist.

  /teams:
    get:
      tags: [team]
      summary: Get teams.
      parameters:
        - in: query
          name: key
          required: false
          schema:
            type: string
            example: "arsenal"
          description: Find team with that has the given key.
      responses:
        200:
          description: Successfully retrieved teams.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Teams'

  /teams/{id}:
    get:
      tags: [team]
      summary: Get specific team.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 17
          description: The ID of the team to get.
      responses:
        200:
          description: Successfully retrieved team.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        404:
          description: The team does not exist.

  /competition/{competition}/admins:
    get:
      tags: [competition admin]
      summary: Get competition admins.
      parameters:
        - in: path
          name: competition
          description: The ID of the competition.
          required: true
          schema:
            type: integer
            example: 2
      responses:
        200:
          description: Successfully retrieved admins.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompetitionAdmins'
        404:
          description: The competition does not exist.

  /competitions/{competition}/teams:
    get:
      tags: [team]
      summary: Get teams in competition.
      parameters:
        - in: path
          name: competition
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the competition to get teams from.
      responses:
        200:
          description: Successfully retrieved teams.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Teams'
        404:
          description: The competition does not exist.

  /divisions/{division}/teams:
    get:
      tags: [team]
      summary: Get teams in division.
      parameters:
        - in: path
          name: division
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the division to get teams from.
      responses:
        200:
          description: Successfully retrieved teams.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Teams'
        404:
          description: The division does not exist.


  /competition/{competition}/divisions:
    get:
      tags: [division]
      summary: Get all divisions
      parameters:
        - in: path
          name: competition
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the competition to get divisions from.
      responses:
        200:
          description: Successfully retrieved divisions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Divisions'
        400:
          description: Failed to retrieve divisions.
        404:
          description: Competition does not exist.

  /divisions/{division}/seasons:
    get:
      tags: [season]
      summary: Get seasons
      parameters:
        - in: path
          name: division
          required: true
          schema:
            type: integer
          description: The ID of the division the season belongs in.
      responses:
        200:
          description: Successfully retrieved seasons.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Seasons'
        404:
          description: Division does not exist.

  /seasons/{id}:
    get:
      tags: [season]
      summary: Get season by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Numeric ID of the season.
      responses:
        200:
          description: Successfully retrieved season.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Season'
        404:
          description: Season does not exist.

  /seasons/{season}/matches:
    get:
      tags: [match]
      summary: Get all matches in season
      parameters:
        - in: path
          name: season
          required: true
          schema:
            type: integer
          description: The ID of the season.
      responses:
        200:
          description: Successfully fetched matches.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Matches'
        404:
          description: Season does not exist.

  /matches/{id}:
    get:
      tags: [match]
      summary: Get match by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the match.
      responses:
        200:
          description: Successfully retrieved match.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Match'
        404:
          description: Match does not exist.

  /matches/{match}/referee:
    put:
      tags: [match]
      summary: Set the match referee
      description: >
        Update the referee of the given match. The user making the request must
        be authenticated as a competition admin.
      parameters:
        - in: path
          name: match
          required: true
          schema:
            type: integer
          description: The match ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: The refereeing team's ID.
      responses:
        200:
          description: Referee updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  referee:
                    type: integer
                    description: The ID of the newly assigned refereeing team.
        400:
          description: Invalid referee.
        403:
          description: User is not a competition admin.
        404:
          description: Match does not exist.

components:
  securitySchemes:
    basic:
      type: http
      scheme: basic

    bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      required:
        - alias
        - password
      properties:
        id:
          type: integer
          readOnly: true
        alias:
          type: string
        password:
          type: string
          writeOnly: true

    Users:
      type: array
      items:
        $ref: '#/components/schemas/User'

    Token:
      type: object
      properties:
        token:
          type: string
        id:
          type: number
        expiration-date:
          type: string
          format: date-time

    Competition:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        key:
          type: string
          readOnly: true
          example: korpen-volleyboll
        name:
          type: string
          example: Korpen Volleyboll

    Competitions:
      type: array
      items:
        $ref: '#/components/schemas/Competition'

    CompetitionAdmin:
      type: object
      properties:
        id:
          type: integer
          example: 1
        alias:
          type: string
          readOnly: true
          example: Kalle

    CompetitionAdmins:
      type: array
      items:
        $ref: '#/components/schemas/CompetitionAdmin'

    Set:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        match:
          type: integer
        home_score:
          type: integer
        away_score:
          type: integer

    Sets:
      type: array
      items:
        $ref: '#/components/schemas/Set'

    Match:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        season:
          type: integer
        home_team:
          type: integer
        away_team:
          type: integer
        referee:
          type: integer
        match-date:
          description: "The date and time the match will take place."
          type: string
          format: date-time
        sets:
          $ref: '#/components/schemas/Sets'

    Matches:
      type: array
      items:
        $ref: '#/components/schemas/Match'

    Team:
      type: object
      required:
        - name
        - division
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        key:
          type: string
          readOnly: true
        division:
          type: integer
        competition:
          type: integer
        activated:
          type: boolean
          readOnly: true

    Teams:
      type: array
      items:
        $ref: '#/components/schemas/Team'

    Division:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        key:
          type: string
          readOnly: true
        competition:
          type: integer
        seasons:
          $ref: '#/components/schemas/Seasons'

    DivisionLite:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        key:
          type: string

    Divisions:
      type: array
      items:
        $ref: '#/components/schemas/DivisionLite'

    Season:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        key:
          type: string
          readOnly: true
        division:
          type: integer
        competition:
          type: integer
        start-date:
          type: string
          format: date-time
        end-date:
          type: string
          format: date-time

    Seasons:
      type: array
      items:
        $ref: '#/components/schemas/Season'


